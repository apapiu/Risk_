if (a%%i == 0) d = append(d, i, after = length(d))
}
d
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (a%%i == 0) {P = FALSE; break}
}
return P
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (a%%i == 0) {P = FALSE; break}
}
P
}
primez(14)
primez(8)
primez(8)
primez <- function(n) {
P = TRUE
for (i in 2:n)) {
if (n%%i == 0) {P = FALSE; break}
}
P
}
primez <- function(n) {
P = TRUE
for (i in 2:n)) {
if (n%%i == 0) {P = FALSE; break}
}
P
}
primez(8)
primez <- function(n) {
P = TRUE
for (i in 2:n)) {
if (n%%i == 0) {P = FALSE; break}
}
return(P)
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
return(P)
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
return(P)
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE
break}
}
return(P)
}
primez(8)
primez(9)
primez(11)
primez(13)
primez(15)
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
return(P)
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
return(P)
}
primez(15)
d
d[9]
primez(d[9])
primez(d[8])
primez(d[7])
primez(d[6])
d[6]
?break
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
P
}
primez(d[9])
primez(d[9])
primez(d[8])
primez(d[7])
primez(d[6])
test = append(test, 2)
test = append(test, 2:3)
a = 600851475143
d = 0
for (i in 1:sqrt(a)){
if (a%%i == 0) d = append(d, i)
}
a = 600851475143
d = 0
for (i in 1:sqrt(a)){
if (a%%i == 0) d = append(d, i)
}
a = 600851475143
d = 0
for (i in 1:sqrt(a)){
if (a%%i == 0) d = append(d, i)
}
?subset
for (i in d) primez(i)
for (i in d) print(primez(i))
?prime
D
d
primez(d[9])
primez(d[8])
primez(d[7])
primez(d[6])
a = numeric(2)
a[1]=1
a[2]=1
i = 2
while (a[i] <4000000){
a = append(a, a[i-1]+a[i])
i = i+1
}
a
sum(a)
subset(a, a%%2 ==0)
sum(subset(a, a%%2 ==0))
a[a%%2 == 0]
test = c(1,2)
test[3] = 2
a = numeric(2)
a[1]=1
a[2]=1
i = 2
while (a[i] <4000000){
a[i] = a[i-1]+a[i]
i = i+1
}
while (a[i] <4000000){
a[i] = a[i-1]+a[i-2]
i = i+1
}
a = numeric(2)
a[1]=1
a[2]=1
i = 2
while (a[i] <4000000){
a[i] = a[i-1]+a[i-2]
i = i+1
}
a = numeric(2)
a[1]=1
a[2]=1
i = 3
while (a[i] <4000000){
a[i] = a[i-1]+a[i-2]
i = i+1
}
test[4] = test[3]+test[2]
test[5] = 2*test[4]
while (a[i] <4000000){
a[i] = a[i-1]+a[i-2]
print(a[i])
i = i+1
}
a = numeric(2)
a[1]=1
a[2]=1
i = 3
while (a[i] <4000000){
a[i] = a[i-1]+a[i-2]
print(a[i])
i = i+1
}
test = c(1,2)
test[3] = 2
sum(subset(a, a%%2 ==0))
a = numeric(2)
a[1]=1
a[2]=1
i = 3
while (a[i] <4000000){
a[i] = a[i-1] + a[i-2]
print(a[i])
i = i+1
}
sum(subset(a, a%%2 ==0))
a = numeric(2)
a[1]=1
a[2]=1
i = 2
while (a[i] <4000000){
a[i+1] = a[i] + a[i-1]
i = i+1
}
sum(subset(a, a%%2 ==0))
a = 600851475143
d = 0
for (i in 1:sqrt(a)){
if (a%%i == 0) d = append(d, i)
}
primez <- function(n) {
P = TRUE
for (i in 2:sqrt(n)) {
if (n%%i == 0) {P = FALSE; break}
}
P
}
for (i in d) print(primez(i))
primez(d[9])
primez(d[8])
primez(d[7])
primez(d[6])
d
x = 1:2000000
y = subset(x, primez(x))
x = 1:2000
y = subset(x, primez(x))
y = subset(x, primez(x) == TRUE)
x[primez(x)]
x[x >3]
x[ x%%2 == 1]
x[primez(x)]
S = 0
for (i in x)
if primez(x) S = S+i
S = 0
for (i in x)
if (primez(i)) S = S+i
x = 1:2000000
S = 0
for (i in x)
if (primez(i)) S = S+i
x = 1:200000
S = 0
for (i in x)
if (primez(i)) S = S+i
mydata <- read.csv("https://projecteuler.net/project/resources/p054_poker.txt")
View(mydata)
mydata <- read.csv("https://projecteuler.net/project/resources/p054_poker.txt", header = FALSE)
View(mydata)
str(mydata)
mydata[1]
mydata[[1]]
View(mydata)
mydata[1,1]
x = as.string(mydata[1,1])
x = tostring(mydata[1,1])
x = toString(mydata[1,1])
x
strsplit(x, " ")
y = strsplit(x, " ")
[1]
y
y[1]
y[1][[1]]
y = strsplit(x, "")
y
1:10:2
1:10 by 2
?:
seq(1,10,3)
y[[1]][1]
lenght(y[[1]])
length(y[[1]])
seq(1,29,3)
y[[1]][seq(1,29,3)]
numbers = y[[1]][seq(1,29,3)]
suites = y[[1]][seq(2,29,3)]
suites
suites[1] = suites[3]
suites[1] == suites[3]
unique(numbers)
unique(numbers[1:5])
hands <- dafaframe()
hands <- c("Pair", "2Pairs","3","4", "Full", "Straight", "Flush")
handz <- cbind(hands)
View(handz)
hands <- c("Pair", "2Pairs","3","4", "Full", "Straight", "Flush")
handz <- cbind(hands, numeric(length(hands), numericn(length(hands))))
handz <- cbind(hands, numeric(length(hands)), numericn(length(hands))))
handz <- cbind(hands, numeric(length(hands)), numericn(length(hands)))
handz <- cbind(hands, numeric(7), numeric(7))
View(handz)
rownames(handz) <- hands
hands <- c("Pair", "2Pairs","3","4", "Full", "Straight", "Flush")
handz <- cbind( numeric(7), numeric(7))
rownames(handz) <- hands
View(handz)
handz$Pair
hands <- c("Pair", "2Pairs","3","4", "Full", "Straight", "Flush")
handz <- rbind( numeric(7), numeric(7))
colnames(handz) <- hands
View(handz)
hands$Pair
handz$Pair
handz[1,1]
View(handz)
handz["Pair"]
View(handz)
handz[,1]
handz["1"]
data("mtcars")
data = data("mtcars")
View(mydata)
x = toString(mydata[1,1])
y = strsplit(x, "")
1num = numbers[1:5]
num1 = numbers[1:5]
num1
suites1
suites1 = suites[1:5]
suites1
m <- matrix(1:36, nrow = 6)
View(m)
n <- matrix(numeric(16), nrow = 4)
m <- matrix(1:36, nrow = 6)
n <- matrix(numeric(16), nrow = 4)
for (i in 1:4) {
for j in (1:4) {
n[i,j] <- m[i-1,j-1]+m[i-1,j]+m[i-1,j+1]+m[i,j]+m[i+1,j-1]+m[i+1,j]+m[i+1,j+1]
}
}
for (i in 1:4) {
for j in (1:4) n[i,j] <- m[i-1,j-1]+m[i-1,j]+m[i-1,j+1]+m[i,j]+m[i+1,j-1]+m[i+1,j]+m[i+1,j+1]
}
for (i in 1:4) {
for (j in 1:4) n[i,j] <- m[i-1,j-1]+m[i-1,j]+m[i-1,j+1]+m[i,j]+m[i+1,j-1]+m[i+1,j]+m[i+1,j+1]
}
n <- matrix(numeric(36), nrow = 6)
m <- matrix(1:36, nrow = 6)
n <- matrix(numeric(36), nrow = 6)
for (i in 2:5) {
for (j in 2:5) n[i,j] <- m[i-1,j-1]+m[i-1,j]+m[i-1,j+1]+m[i,j]+m[i+1,j-1]+m[i+1,j]+m[i+1,j+1]
}
n
max(n)
m
getwd()
#' status parameter to 'publish'.
#' This R script will process all R markdown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param dir the directory to process R Markdown files.
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org>
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
convertRMarkdown()
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost(problem2.24.Rmd)
ls()
ls
ks()
ls()
getwd()
train <- read.table("http://amlbook.com/data/zip/zip.train")
test <- read.table("http://amlbook.com/data/zip/zip.test")
summary(train)
str(train)
dim(train)
list.files()
beer_reviews <- read.csv("~/Documents/R/beer_reviews.csv")
View(beer_reviews)
2+2
?aggregate
str(beer_reviews)
byabv <- aggregate(beer_reviews$beer_abv, by = beer_reviews$brewery_name,
FUN = mean)
byabv <- aggregate(beer_reviews$beer_abv, by = list(beer_reviews$brewery_name),
FUN = mean)
View(byabv)
sum( !is.na(beer_reviews$beer_abv  ) )
)
table(beer_reviews$beer_abv)
sum(table(beer_reviews$beer_abv))
byabv <- aggregate(beer_reviews$beer_abv, by = list(beer_reviews$brewery_name),
FUN = max)
byabv
byabv <- aggregate(beer_reviews$beer_abv, by = list(beer_reviews$brewery_name),
FUN = mean)
byabv
beer_reviews$beer_abv
mean(beer_reviews$beer_abv)
mean(beer_reviews$beer_abv, na.rm = TRUE)
byabv <- aggregate(beer_reviews$beer_abv, by = list(beer_reviews$brewery_name),
FUN = function(x){mean(x, na.rm = TRUE)})
byabv
View(byabv)
beer_reviews$brewery_name[1:10]
unique(beer_reviews$brewery_name)[1:10]
beer_review[beer_reviews$brewery_name == "3 Cordilleras",]
beer_reviews[beer_reviews$brewery_name == "3 Cordilleras",]
temp <- beer_reviews[beer_reviews$brewery_name == "3 Cordilleras",]
View(temp)
max(byabv)
max(byabv[,2])
max(byabv[,2], na.rm = TRUE)
which.max(byabv[,2], na.rm = TRUE)
which.max(byabv[,2])
coeff <-  which.max(byabv[,2])
byabv[coeff,]
highestabv <- byabv[coeff,]
beer_reviews[beer_reviews$beer_beerid == 47986,]
?group_by
library(dplyr)
?group_by
temp <- group_by(beer_reviews, beer_style)
View(temp)
summarise((temp, mean(byabv, na.rm = TRUE)))
summarise(temp, mean(byabv, na.rm = TRUE))
by_beer <- group_by(beer_reviews, beer_style)
summarise(by_beer, mean(byabv, na.rm = TRUE))
summarise(by_beer, mean(review_overall, na.rm = TRUE))
beer_by_review <- summarise(by_beer, mean(review_overall, na.rm = TRUE))
View(beer_by_review)
aggregate(beer_reviews$review_overall, by = list(beer_reviews$beer_style),
FUN = mean)
by_beer <- group_by(beer_reviews, beer_style)
beer_by_review <- summarise(by_beer, mean(review_overall, na.rm = TRUE))
aggregate(beer_reviews$review_overall, by = list(beer_reviews$beer_style),
FUN = mean)
colnames(beer_reviews)
select(beer_reviews, beer_name, beer_abv)
temp <- select(beer_reviews, beer_name, beer_abv)
View(temp)
temp1 <- filter(beer_reviews, beer_abv >7)
View(temp1)
beer_name, beer_abv
colnames(beer_reviews)
temp1 <- filter(beer_reviews, beer_abv >7, review_overall >3)
temp2 <- arrange(beer_reviews, beer_abv)
View(temp2)
?arrange
temp2 <- desc(beer_reviews, beer_abv)
temp2 <- arrange(beer_reviews, desc(beer_abv))
View(temp2)
getwd()
setwd("/Users/alexpapiu/Documents/R/Risk")
load("Risk.R")
list.files()
load("Risk.RData")
